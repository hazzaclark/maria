// COPYRIGHT (C) HARRY CLARK 2025
// LIGHTWEIGHT CODE EMITTER/GENERATOR FOR THE HITACHI SUPERH2

// THIS FILE PERTAINS TOWARDS THE ACTUAL IMPLEMENTATION SURROUNDING THE EMITTER
// THE IDEA BEHIND THIS FILE IS THAT WE WANT TO BE ABLE TO MAKE A STATICALLY TYPE COLLECTION
// OF ALL OF THE OPCODE FAMILIES AND EMIT THEM ACCORDINGLY TO THEIR UNQIUE CHARACTERISTICS

// WHAT WOULD OTHERWISE MAKE THIS ADJACENT TO AN EMULATOR IS THAT WE ARE NOT CONCERN WITH THE INTRINISC
// PATTERNS AND DESIGN OF SAID OPCODE FAMILY, MOREOVER JUST WHAT THEY REPRESENT IN MEMORY AND ANYTHING
// THAT COMES ATTACHED WITH THEM IN RUNTIME

// NESTED INCLUDES

#include <impl/buffer.hh>
#include <impl/emitter.hh>

namespace maria 
{
    EMITTER::EMITTER(UNK CAPACITY) : _BUFFER(CAPACITY) {}
    EMITTER::~EMITTER() = default;
    BUFFER& EMITTER::GET_BUFFER() noexcept { return _BUFFER; }

    ////////////////////////////////////////////
    //       HITACHI SUPERH2 INSTRUCTIONS
    ////////////////////////////////////////////

    // OPCODE MASKS:https://www.farnell.com/datasheets/60581.pdf#page=75

    void EMITTER::SH2_ADD(GP_REGISTER RM, GP_REGISTER RN) noexcept
    {
        EMITTER::SH2_EMIT_R_TYPE(_BUFFER, RM, RN, 0b011000000001100);
    }

    void EMITTER::SH2_ADDI(U32 IMM, GP_REGISTER RN) noexcept
    {
        EMITTER::SH2_EMIT_IMM_TYPE(_BUFFER, RN, IMM, 0b0111000000000000);
    }

    void EMITTER::SH2_ADDC(GP_REGISTER RM, GP_REGISTER RN) noexcept
    {
        EMITTER::SH2_EMIT_R_TYPE(_BUFFER, RM, RN, 0b011000000001110);
    }

    void EMITTER::SH2_ADDV(GP_REGISTER RM, GP_REGISTER RN) noexcept
    {
        EMITTER::SH2_EMIT_R_TYPE(_BUFFER, RM, RN, 0b011000000001111);
    }

    void EMITTER::SH2_CMP_EQ_IMM(U32 IMM, GP_REGISTER RN) noexcept
    {
        EMITTER::SH2_EMIT_IMM_TYPE(_BUFFER, RN, IMM, 0x8029);
    }
}
